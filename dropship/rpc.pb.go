// Code generated by protoc-gen-go.
// source: dropship/rpc.proto
// DO NOT EDIT!

/*
Package dropship is a generated protocol buffer package.

It is generated from these files:
	dropship/rpc.proto

It has these top-level messages:
	Event
	DeployRequest
	DeployResponse
	Member
	MemberAddRequest
	MemberAddResponse
	MemberRemoveRequest
	MemberRemoveResponse
*/
package dropship

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Event_EventType int32

const (
	Event_INFO  Event_EventType = 0
	Event_ERROR Event_EventType = 1
)

var Event_EventType_name = map[int32]string{
	0: "INFO",
	1: "ERROR",
}
var Event_EventType_value = map[string]int32{
	"INFO":  0,
	"ERROR": 1,
}

func (x Event_EventType) String() string {
	return proto.EnumName(Event_EventType_name, int32(x))
}
func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Event struct {
	Type    Event_EventType `protobuf:"varint,1,opt,name=type,enum=dropship.Event_EventType" json:"type,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DeployRequest struct {
	Service  string `protobuf:"bytes,1,opt,name=Service" json:"Service,omitempty"`
	Revision string `protobuf:"bytes,2,opt,name=Revision" json:"Revision,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeployResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *DeployResponse) Reset()                    { *m = DeployResponse{} }
func (m *DeployResponse) String() string            { return proto.CompactTextString(m) }
func (*DeployResponse) ProtoMessage()               {}
func (*DeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeployResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Member struct {
	ID       uint64   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PeerUrls []string `protobuf:"bytes,3,rep,name=peerUrls" json:"peerUrls,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MemberAddRequest struct {
	Name     string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PeerUrls []string `protobuf:"bytes,2,rep,name=peerUrls" json:"peerUrls,omitempty"`
}

func (m *MemberAddRequest) Reset()                    { *m = MemberAddRequest{} }
func (m *MemberAddRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberAddRequest) ProtoMessage()               {}
func (*MemberAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type MemberAddResponse struct {
	Member *Member `protobuf:"bytes,1,opt,name=member" json:"member,omitempty"`
}

func (m *MemberAddResponse) Reset()                    { *m = MemberAddResponse{} }
func (m *MemberAddResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberAddResponse) ProtoMessage()               {}
func (*MemberAddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MemberAddResponse) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

type MemberRemoveRequest struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *MemberRemoveRequest) Reset()                    { *m = MemberRemoveRequest{} }
func (m *MemberRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberRemoveRequest) ProtoMessage()               {}
func (*MemberRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type MemberRemoveResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *MemberRemoveResponse) Reset()                    { *m = MemberRemoveResponse{} }
func (m *MemberRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberRemoveResponse) ProtoMessage()               {}
func (*MemberRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Event)(nil), "dropship.Event")
	proto.RegisterType((*DeployRequest)(nil), "dropship.DeployRequest")
	proto.RegisterType((*DeployResponse)(nil), "dropship.DeployResponse")
	proto.RegisterType((*Member)(nil), "dropship.Member")
	proto.RegisterType((*MemberAddRequest)(nil), "dropship.MemberAddRequest")
	proto.RegisterType((*MemberAddResponse)(nil), "dropship.MemberAddResponse")
	proto.RegisterType((*MemberRemoveRequest)(nil), "dropship.MemberRemoveRequest")
	proto.RegisterType((*MemberRemoveResponse)(nil), "dropship.MemberRemoveResponse")
	proto.RegisterEnum("dropship.Event_EventType", Event_EventType_name, Event_EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Management service

type ManagementClient interface {
	MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error)
	MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error)
}

type managementClient struct {
	cc *grpc.ClientConn
}

func NewManagementClient(cc *grpc.ClientConn) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error) {
	out := new(MemberAddResponse)
	err := grpc.Invoke(ctx, "/dropship.Management/MemberAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error) {
	out := new(MemberRemoveResponse)
	err := grpc.Invoke(ctx, "/dropship.Management/MemberRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Management service

type ManagementServer interface {
	MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error)
	MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error)
}

func RegisterManagementServer(s *grpc.Server, srv ManagementServer) {
	s.RegisterService(&_Management_serviceDesc, srv)
}

func _Management_MemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MemberAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ManagementServer).MemberAdd(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Management_MemberRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(MemberRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ManagementServer).MemberRemove(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Management_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dropship.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberAdd",
			Handler:    _Management_MemberAdd_Handler,
		},
		{
			MethodName: "MemberRemove",
			Handler:    _Management_MemberRemove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Deploy service

type DeployClient interface {
	Watch(ctx context.Context, opts ...grpc.CallOption) (Deploy_WatchClient, error)
	Trigger(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (Deploy_TriggerClient, error)
}

type deployClient struct {
	cc *grpc.ClientConn
}

func NewDeployClient(cc *grpc.ClientConn) DeployClient {
	return &deployClient{cc}
}

func (c *deployClient) Watch(ctx context.Context, opts ...grpc.CallOption) (Deploy_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Deploy_serviceDesc.Streams[0], c.cc, "/dropship.Deploy/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployWatchClient{stream}
	return x, nil
}

type Deploy_WatchClient interface {
	Send(*DeployRequest) error
	Recv() (*DeployResponse, error)
	grpc.ClientStream
}

type deployWatchClient struct {
	grpc.ClientStream
}

func (x *deployWatchClient) Send(m *DeployRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deployWatchClient) Recv() (*DeployResponse, error) {
	m := new(DeployResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployClient) Trigger(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (Deploy_TriggerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Deploy_serviceDesc.Streams[1], c.cc, "/dropship.Deploy/Trigger", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployTriggerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Deploy_TriggerClient interface {
	Recv() (*DeployResponse, error)
	grpc.ClientStream
}

type deployTriggerClient struct {
	grpc.ClientStream
}

func (x *deployTriggerClient) Recv() (*DeployResponse, error) {
	m := new(DeployResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Deploy service

type DeployServer interface {
	Watch(Deploy_WatchServer) error
	Trigger(*DeployRequest, Deploy_TriggerServer) error
}

func RegisterDeployServer(s *grpc.Server, srv DeployServer) {
	s.RegisterService(&_Deploy_serviceDesc, srv)
}

func _Deploy_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeployServer).Watch(&deployWatchServer{stream})
}

type Deploy_WatchServer interface {
	Send(*DeployResponse) error
	Recv() (*DeployRequest, error)
	grpc.ServerStream
}

type deployWatchServer struct {
	grpc.ServerStream
}

func (x *deployWatchServer) Send(m *DeployResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deployWatchServer) Recv() (*DeployRequest, error) {
	m := new(DeployRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Deploy_Trigger_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployServer).Trigger(m, &deployTriggerServer{stream})
}

type Deploy_TriggerServer interface {
	Send(*DeployResponse) error
	grpc.ServerStream
}

type deployTriggerServer struct {
	grpc.ServerStream
}

func (x *deployTriggerServer) Send(m *DeployResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Deploy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dropship.Deploy",
	HandlerType: (*DeployServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Deploy_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Trigger",
			Handler:       _Deploy_Trigger_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0xce, 0xd2, 0x40,
	0x14, 0xc5, 0xbf, 0xe1, 0x2b, 0xa5, 0xbd, 0x20, 0xd4, 0xd1, 0xc4, 0x5a, 0xa3, 0x62, 0x37, 0xb0,
	0x42, 0xac, 0xba, 0xd7, 0x04, 0x49, 0x58, 0x20, 0x49, 0xc5, 0xb8, 0x2e, 0xe5, 0x06, 0x9a, 0xd0,
	0x76, 0x9c, 0x29, 0x4d, 0x78, 0x07, 0x5f, 0xc3, 0xf7, 0x74, 0xfa, 0x67, 0x2c, 0x7f, 0x74, 0xf3,
	0x6d, 0x08, 0x99, 0x7b, 0xce, 0xef, 0x9c, 0xce, 0x6d, 0x81, 0x6e, 0x79, 0xca, 0xc4, 0x3e, 0x62,
	0x6f, 0x39, 0x0b, 0x27, 0x8c, 0xa7, 0x59, 0x4a, 0x0d, 0x75, 0xe6, 0x86, 0xd0, 0xfe, 0x92, 0x63,
	0x92, 0xd1, 0x11, 0x68, 0xd9, 0x89, 0xa1, 0x4d, 0x86, 0x64, 0xdc, 0xf7, 0x9e, 0x4f, 0x94, 0x62,
	0x52, 0x8e, 0xab, 0xdf, 0xb5, 0x14, 0xd0, 0x01, 0x74, 0x62, 0x14, 0x22, 0xd8, 0xa1, 0xdd, 0x92,
	0x5a, 0xd3, 0x1d, 0x82, 0xd9, 0x4c, 0x0d, 0xd0, 0x16, 0x5f, 0xe7, 0x2b, 0xeb, 0x8e, 0x9a, 0x92,
	0xec, 0xfb, 0x2b, 0xdf, 0x22, 0xae, 0x07, 0x8f, 0x66, 0xc8, 0x0e, 0xe9, 0xc9, 0xc7, 0x9f, 0x47,
	0x14, 0x59, 0xc1, 0xf8, 0x86, 0x3c, 0x8f, 0xc2, 0x2a, 0xcf, 0xa4, 0x16, 0x18, 0x3e, 0xe6, 0x91,
	0x88, 0xd2, 0xa4, 0xa6, 0xbe, 0x83, 0xbe, 0xf2, 0x08, 0x96, 0x26, 0x02, 0xe9, 0x6b, 0xd0, 0xb1,
	0xc8, 0x11, 0xd2, 0x73, 0x3f, 0xee, 0x7a, 0x83, 0xab, 0x8e, 0xee, 0x07, 0xd0, 0x97, 0x18, 0x6f,
	0x90, 0x53, 0x80, 0xd6, 0x62, 0x56, 0xa2, 0x35, 0xda, 0x03, 0x2d, 0x09, 0xe2, 0xba, 0x6c, 0x11,
	0xc4, 0x10, 0xf9, 0x77, 0x7e, 0x10, 0xf6, 0xbd, 0xc4, 0x98, 0xb2, 0x9c, 0x55, 0xb9, 0x3e, 0x6f,
	0xb7, 0xaa, 0x9f, 0xf2, 0x90, 0x1b, 0x4f, 0xab, 0xf4, 0x7c, 0x84, 0xc7, 0x67, 0x9e, 0xba, 0xdf,
	0x10, 0xf4, 0xb8, 0x3c, 0x2c, 0x6d, 0x5d, 0xcf, 0x6a, 0xfa, 0x55, 0x62, 0xf7, 0x0d, 0x3c, 0xa9,
	0xfe, 0xf9, 0x18, 0xa7, 0x39, 0xaa, 0xb4, 0xb3, 0xb6, 0xee, 0x08, 0x9e, 0x5e, 0x4a, 0x6a, 0xb8,
	0xbc, 0x31, 0x71, 0x0c, 0x43, 0x79, 0xf1, 0xa5, 0xd0, 0xf0, 0x7e, 0x13, 0x80, 0x65, 0x90, 0xc8,
	0x35, 0xc4, 0xc5, 0xfa, 0xe6, 0x60, 0xfe, 0x6d, 0x44, 0x9d, 0xeb, 0xe4, 0xe6, 0xd1, 0x9c, 0x17,
	0xff, 0x9c, 0x55, 0x29, 0xee, 0x1d, 0x5d, 0x41, 0xef, 0x3c, 0x9f, 0xbe, 0xbc, 0x96, 0x5f, 0x54,
	0x77, 0x5e, 0xfd, 0x6f, 0xac, 0x80, 0xde, 0x2f, 0x02, 0x7a, 0xb5, 0x48, 0xfa, 0x09, 0xda, 0x3f,
	0x82, 0x2c, 0xdc, 0xd3, 0x67, 0x8d, 0xeb, 0xe2, 0xbd, 0x70, 0xec, 0xdb, 0x81, 0x02, 0x8d, 0xc9,
	0x94, 0x48, 0x42, 0x67, 0xcd, 0xa3, 0xdd, 0x4e, 0xae, 0xf8, 0x21, 0x8c, 0x29, 0xd9, 0xe8, 0xe5,
	0x07, 0xf0, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xbd, 0xf7, 0xb7, 0x16, 0x03, 0x00,
	0x00,
}
