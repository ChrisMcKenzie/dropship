// Code generated by protoc-gen-go.
// source: dropship/rpc.proto
// DO NOT EDIT!

/*
Package dropship is a generated protocol buffer package.

It is generated from these files:
	dropship/rpc.proto

It has these top-level messages:
	Service
	RegisterResponse
*/
package dropship

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Service struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RegisterResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Service)(nil), "dropship.Service")
	proto.RegisterType((*RegisterResponse)(nil), "dropship.RegisterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for RpcService service

type RpcServiceClient interface {
	RegisterService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) RegisterService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/dropship.rpcService/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcService service

type RpcServiceServer interface {
	RegisterService(context.Context, *Service) (*RegisterResponse, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(RpcServiceServer).RegisterService(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dropship.rpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _RpcService_RegisterService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x29, 0xca, 0x2f,
	0x28, 0xce, 0xc8, 0x2c, 0xd0, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x80, 0x89, 0x29, 0x89, 0x73, 0xb1, 0x07, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xf1, 0x70,
	0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x2a, 0x99, 0x70, 0x09, 0x04,
	0xa5, 0xa6, 0x67, 0x16, 0x97, 0xa4, 0x16, 0x05, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a,
	0xf1, 0x73, 0xb1, 0x17, 0x97, 0x26, 0x27, 0xa7, 0x16, 0x17, 0x83, 0x15, 0x71, 0x80, 0x04, 0x72,
	0x81, 0xbc, 0xc4, 0xf4, 0x54, 0x09, 0x26, 0x90, 0x2e, 0x23, 0x3f, 0x2e, 0x2e, 0xa0, 0x2d, 0x30,
	0x13, 0x1d, 0xb8, 0xf8, 0x61, 0x66, 0xc0, 0x84, 0x04, 0xf5, 0x60, 0x56, 0xeb, 0x41, 0x85, 0xa4,
	0xa4, 0x10, 0x42, 0xe8, 0x36, 0x26, 0xb1, 0x81, 0xdd, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x7c, 0x50, 0x07, 0x39, 0xc5, 0x00, 0x00, 0x00,
}
